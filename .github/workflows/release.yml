name: Release

on:
  push:
    tags:
      - 'v*'

env:
  SWIFT_VERSION: '5.9'

jobs:
  validate:
    name: Validate Release
    runs-on: macos-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
      is_prerelease: ${{ steps.extract.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version info
        id: extract
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "version=$TAG_NAME" >> $GITHUB_OUTPUT
          
          if [[ "$TAG_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          fi
          
          echo "Extracted version: $TAG_NAME"

      - name: Validate tag format
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          if [[ ! "$TAG_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.-]+)?$ ]]; then
            echo "❌ Invalid tag format: $TAG_NAME"
            echo "Expected format: vX.Y.Z or vX.Y.Z-prerelease"
            exit 1
          fi
          echo "✅ Tag format is valid"

      - name: Validate changelog entry
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION_WITHOUT_V=${TAG_NAME#v}
          
          if ! grep -q "## \[$VERSION_WITHOUT_V\]" CHANGELOG.md; then
            echo "❌ No changelog entry found for version $VERSION_WITHOUT_V"
            echo "Please ensure CHANGELOG.md contains an entry for this version"
            exit 1
          fi
          echo "✅ Changelog entry found"

  security:
    name: Security Validation
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Security scan
        run: |
          echo "Running security checks for release..."
          if grep -r -i "password\|secret\|key\|token" Sources/ --include="*.swift" | grep -v "// " | grep -v "//" | head -5; then
            echo "⚠️ Potential secrets found in release. Please review."
            exit 1
          fi
          echo "✅ Security validation passed"

  build:
    name: Build and Test
    runs-on: macos-latest
    needs: [validate, security]
    strategy:
      matrix:
        destination:
          - 'platform=macOS'
          - 'platform=iOS Simulator,name=iPhone 15'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode
        run: sudo xcode-select -switch /Applications/Xcode_15.0.app/Contents/Developer

      - name: Cache Swift Package Manager
        uses: actions/cache@v3
        with:
          path: .build
          key: ${{ runner.os }}-spm-release-${{ hashFiles('Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-release-
            ${{ runner.os }}-spm-

      - name: Build release version
        run: |
          echo "Building release version ${{ needs.validate.outputs.version }}"
          swift build -c release --verbose

      - name: Run tests
        run: |
          swift test -c release --enable-code-coverage

      - name: Upload build artifacts
        if: matrix.destination == 'platform=macOS'
        uses: actions/upload-artifact@v3
        with:
          name: release-build-${{ needs.validate.outputs.version }}
          path: .build/release/
          retention-days: 30

  documentation:
    name: Build Documentation
    runs-on: macos-latest
    needs: [validate, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode
        run: sudo xcode-select -switch /Applications/Xcode_15.0.app/Contents/Developer

      - name: Build Documentation
        run: |
          xcodebuild docbuild \
            -scheme ChildModeKit \
            -destination generic/platform=iOS

      - name: Create documentation archive
        run: |
          DOCCARCHIVE=$(find ~/Library/Developer/Xcode/DerivedData -name "ChildModeKit.doccarchive" -type d | head -1)
          if [ -n "$DOCCARCHIVE" ]; then
            mkdir -p ./release-assets
            tar -czf ./release-assets/ChildModeKit-${{ needs.validate.outputs.version }}-documentation.tar.gz -C "$(dirname "$DOCCARCHIVE")" "$(basename "$DOCCARCHIVE")"
            echo "Documentation archived for release"
          else
            echo "Documentation archive not found"
            exit 1
          fi

      - name: Upload documentation artifact
        uses: actions/upload-artifact@v3
        with:
          name: documentation-${{ needs.validate.outputs.version }}
          path: ./release-assets/ChildModeKit-${{ needs.validate.outputs.version }}-documentation.tar.gz
          retention-days: 90

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, security, build, documentation]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download documentation
        uses: actions/download-artifact@v3
        with:
          name: documentation-${{ needs.validate.outputs.version }}
          path: ./release-assets/

      - name: Generate release notes
        id: release_notes
        run: |
          TAG_NAME=${{ needs.validate.outputs.version }}
          VERSION_WITHOUT_V=${TAG_NAME#v}
          
          echo "Generating release notes for $TAG_NAME..."
          
          # Extract changelog content for this version
          CHANGELOG_CONTENT=$(awk "/## \[$VERSION_WITHOUT_V\]/{flag=1;next} /^## /{flag=0} flag" CHANGELOG.md | sed '/^$/d')
          
          # Get commit range for additional context
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            COMMIT_RANGE="$PREVIOUS_TAG..$TAG_NAME"
            COMMIT_COUNT=$(git rev-list --count $COMMIT_RANGE)
          else
            COMMIT_RANGE="Initial release"
            COMMIT_COUNT="N/A"
          fi
          
          # Create release notes
          cat > release_notes.md << EOF
          # ChildModeKit $TAG_NAME
          
          ## What's Changed
          
          $CHANGELOG_CONTENT
          
          ## Release Information
          
          - **Version**: $TAG_NAME
          - **Commits**: $COMMIT_COUNT since previous release
          - **Swift Version**: ${{ env.SWIFT_VERSION }}
          - **Platforms**: iOS 15.0+, macOS 12.0+
          
          ## Installation
          
          ### Swift Package Manager
          
          Add to your \`Package.swift\`:
          
          \`\`\`swift
          dependencies: [
              .package(url: "https://github.com/Imja-inc/ChildModeKit", from: "$VERSION_WITHOUT_V")
          ]
          \`\`\`
          
          ### Xcode
          
          1. File → Add Package Dependencies
          2. Enter: \`https://github.com/Imja-inc/ChildModeKit\`
          3. Select version \`$TAG_NAME\`
          
          ## Documentation
          
          - 📖 [Complete Documentation](https://github.com/Imja-inc/ChildModeKit#readme)
          - 📦 Documentation archive attached to this release
          - 🔧 [API Reference](https://github.com/Imja-inc/ChildModeKit#api-reference)
          
          ## Verification
          
          This release has been:
          - ✅ Security scanned with GitLeaks
          - ✅ Tested on macOS and iOS Simulator
          - ✅ Built in release configuration
          - ✅ Linted with SwiftLint
          - ✅ Documentation generated successfully
          
          ---
          
          **Full Changelog**: https://github.com/Imja-inc/ChildModeKit/compare/$PREVIOUS_TAG...$TAG_NAME
          EOF
          
          echo "Release notes generated"

      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          release_name: ChildModeKit ${{ needs.validate.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ needs.validate.outputs.is_prerelease }}

      - name: Upload Documentation Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-assets/ChildModeKit-${{ needs.validate.outputs.version }}-documentation.tar.gz
          asset_name: ChildModeKit-${{ needs.validate.outputs.version }}-documentation.tar.gz
          asset_content_type: application/gzip

  notify:
    name: Release Notification
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    if: always()
    steps:
      - name: Release Summary
        run: |
          echo "## 🎉 Release ${{ needs.validate.outputs.version }} Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Prerelease**: ${{ needs.validate.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.create-release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- 📖 Update documentation if needed" >> $GITHUB_STEP_SUMMARY
          echo "- 📢 Announce the release" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Update dependent projects" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.create-release.result }}" == "success" ]]; then
            echo "✅ Release created successfully!"
          else
            echo "❌ Release creation failed"
            exit 1
          fi